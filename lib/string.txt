两头

 > " dd  ".trim()
"dd"

左边

 > "  dd  ".replace(/^\s+/g,"")
"dd  "

右边

> "  dd  ".replace(/\s+$/g,"")
"  dd"


将字符串转化为数字
+

将一个数字的字符串转化为数字很简单的一种做法就是在前面加+号。

  var si = +'12';        //  12
  var sn = +'-12';       // -12
  var sf = +'12.7';      // 12.7
  var ss = +'12s';       // NaN

*

使用乘法符号*转化:

  var si = '12' * 1;     // 12
  var sn = '-12' * 1;    // -12
  var sf = '12.7' * 1;   // 12.7
  var ss = '12s' * 1;    // NaN

将字符串转化为整数
~~

运算符~原意是按位取反，使用~~可以将一个可以转化为数字的字符串转化成整数:

  var si = ~~'12';        // 12
  var sn = ~~'-12'        // -12
  var sf = ~~'12.7';      // 12
  var snf = ~~'-12.7';   // -12
  var ss = ~~'12s';       // 0

>>

运算符>>原意是带符号右移，使用>> 0可以将一个可转化的字符串转化成整数:

  var si = '12' >> 0;       // 12
  var sn = '-12' >> 0;      // -12
  var sf = '12.7' >> 0;     // 12
  var snf = '-12.7' >> 0;  // -12
  var ss = '12s' >> 0;      // 0

>>>

运算符>>>原意是不带符号右移，可以使用>>> 0将一个字符串转化为整数:

  var si = '12' >>> 0;     // 12
  var sn = '-12' >>> 0;    // 4294967284
  var sf = '12.7' >>> 0;   // 12
  var ss = '12s' >>> 0;    // 0

注意

使用上面符号时，其转换与JavaScript自带的库有时候表现是不一样的。如:

  var sfp = '12.4';
  var sfn = '-12.7';
  var msfp = Math.floor(sfp);       //  12
  var nsfp = ~~sfp;                 //  12
  var msfn = Math.floor(sfn);       // -13
  var nsfn = ~~sfn;                 // -12

使用符号代替JavaScript库有以下几种情况:

    使用符号可能会比库函数性能好。但由于JS解释器不同，有可能出现相反的情况。
    减少传输字符，使用符号会节省一定的空间。

但在某些时候，必须使用库函数。如: parseInt('12s')。